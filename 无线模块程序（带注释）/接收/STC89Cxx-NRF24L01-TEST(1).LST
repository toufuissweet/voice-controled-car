C51 COMPILER V9.00   STC89CXX_NRF24L01_TEST                                                03/14/2019 10:45:59 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE STC89CXX_NRF24L01_TEST
OBJECT MODULE PLACED IN STC89Cxx-NRF24L01-TEST.OBJ
COMPILER INVOKED BY: C:\Keil51\C51\BIN\C51.EXE STC89Cxx-NRF24L01-TEST.C BROWSE DEBUG OBJECTEXTEND

line level    source

   1          //无线型号:NRF24L01
   2          //单片机型号：STC89C52RC  
   3          //单片机晶振：11.0592MHZ
   4          //验证单位：沈阳维恩电子科技有限公司 
   5          //最新验证时间2016-3-28
   6          //欢迎关注：WWW.RFINCHINA.COM  无线中国 有你 有我 愿与您一起迈向成功
   7          //基本功能:2.4GHZ无线双向通信功能测试
   8          
   9          //********************************************************************************************
  10          #include <reg52.h>
  11          #include <intrins.h>
  12          
  13          typedef unsigned char uchar;
  14          typedef unsigned char uint;
  15          unsigned int t=0;
  16          unsigned char zkb1=0 ;    //**左边电机的占空比**//
  17          unsigned char zkb2=0 ;    //**右边电机的占空比**//
  18          sbit IN1=P2^0;
  19          sbit IN2=P2^1;
  20          sbit IN3=P2^2;
  21          sbit IN4=P2^3;
  22          sbit ENA=P2^4;
  23          sbit ENB=P2^5;
  24          
  25          
  26          //*********************************NRF24L01/NRF24L01+ IO端口定义******************************
  27          
  28          sbit    MISO    =P1^1;
  29          sbit    MOSI    =P1^2;
  30          sbit    SCK         =P1^3;
  31          sbit    CE          =P1^5;
  32          sbit    CSN             =P1^4;
  33          sbit    IRQ             =P1^0;
  34          
  35          //**********************************收发数据缓冲区*********************************************
  36          
  37          uchar   TxBuf[32];                                      // 预设发送缓冲区       
  38          uchar   RxBuf[32];                                      // 预设接收缓冲区
  39          
  40          //**********************************按键IO端口定义*********************************************
  41          
  42          sbit    KEY1=P2^0;
  43          sbit    KEY2=P3^7;
  44          
  45          //**********************************LED指示灯**************************************************
  46          
  47          sbit    LED1=P0^3;                  //指示灯
  48          sbit    LED2=P0^4;                                  //指示灯
  49          
  50          //*********************************************************************************************
  51          
  52          uint    bdata sta;                              //NRF24L01/NRF24L01+状态标志
  53          sbit    RX_DR   =sta^6;
  54          sbit    TX_DS   =sta^5;
  55          sbit    MAX_RT  =sta^4;
C51 COMPILER V9.00   STC89CXX_NRF24L01_TEST                                                03/14/2019 10:45:59 PAGE 2   

  56          
  57          //**********************************NRF24L01地址长度设置***************************************
  58          
  59          #define TX_ADR_WIDTH    5       // 5 uints TX address width
  60          #define RX_ADR_WIDTH    5       // 5 uints RX address width
  61          
  62          uint const  TX_ADDRESS[TX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};       //本地地址
  63          uint const  RX_ADDRESS[RX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};       //接收地址
  64          
  65          //**********************************NRF24L01收发数据长度设置***********************************
  66          
  67          #define TX_PLOAD_WIDTH  32      // 32 uints TX payload
  68          #define RX_PLOAD_WIDTH  32      // 32 uints TX payload
  69          
  70          //**********************************串口通信相关变量*******************************************
  71          
  72          uchar   flag1,flag2;
  73          
  74          //***************************************NRF24L01寄存器指令************************************
  75          
  76          #define READ_REG        0x00    // 读寄存器指令
  77          #define WRITE_REG       0x20    // 写寄存器指令
  78          #define RD_RX_PLOAD     0x61    // 读取接收数据指令
  79          #define WR_TX_PLOAD     0xA0    // 写待发数据指令
  80          #define FLUSH_TX        0xE1    // 冲洗发送 FIFO指令
  81          #define FLUSH_RX        0xE2    // 冲洗接收 FIFO指令
  82          #define REUSE_TX_PL     0xE3    // 定义重复装载数据指令
  83          #define NOP             0xFF    // 保留
  84          
  85          //*************************************SPI(nRF24L01)寄存器地址*********************************
  86          
  87          #define CONFIG          0x00    // 配置收发状态，CRC校验模式以及收发状态响应方式
  88          #define EN_AA           0x01    // 自动应答功能设置
  89          #define EN_RXADDR       0x02    // 可用信道设置
  90          #define SETUP_AW        0x03    // 收发地址宽度设置
  91          #define SETUP_RETR      0x04    // 自动重发功能设置
  92          #define RF_CH           0x05    // 工作频率设置
  93          #define RF_SETUP        0x06    // 发射速率、功耗功能设置
  94          #define STATUS          0x07    // 状态寄存器
  95          #define OBSERVE_TX      0x08    // 发送监测功能
  96          #define CD              0x09    // 地址检测           
  97          #define RX_ADDR_P0      0x0A    // 频道0接收数据地址
  98          #define RX_ADDR_P1      0x0B    // 频道1接收数据地址
  99          #define RX_ADDR_P2      0x0C    // 频道2接收数据地址
 100          #define RX_ADDR_P3      0x0D    // 频道3接收数据地址
 101          #define RX_ADDR_P4      0x0E    // 频道4接收数据地址
 102          #define RX_ADDR_P5      0x0F    // 频道5接收数据地址
 103          #define TX_ADDR         0x10    // 发送地址寄存器
 104          #define RX_PW_P0        0x11    // 接收频道0接收数据长度
 105          #define RX_PW_P1        0x12    // 接收频道0接收数据长度
 106          #define RX_PW_P2        0x13    // 接收频道0接收数据长度
 107          #define RX_PW_P3        0x14    // 接收频道0接收数据长度
 108          #define RX_PW_P4        0x15    // 接收频道0接收数据长度
 109          #define RX_PW_P5        0x16    // 接收频道0接收数据长度
 110          #define FIFO_STATUS     0x17    // FIFO栈入栈出状态寄存器设置
 111          
 112          //**********************************子函数申明*********************************************
 113          
 114          void Delay(unsigned int s);
 115          void inerDelay_us(unsigned char n);
 116          void init_NRF24L01(void);
 117          uint SPI_RW(uint uchar);
C51 COMPILER V9.00   STC89CXX_NRF24L01_TEST                                                03/14/2019 10:45:59 PAGE 3   

 118          uchar SPI_Read(uchar reg);
 119          void SetRX_Mode(void);
 120          uint SPI_RW_Reg(uchar reg, uchar value);
 121          uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars);
 122          uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars);
 123          unsigned char nRF24L01_RxPacket(unsigned char* rx_buf);
 124          void nRF24L01_TxPacket(unsigned char * tx_buf);
 125          
 126          /******************************************************************************************
 127          /*长延时函数
 128          /******************************************************************************************/
 129          
 130          void Delay(unsigned int s)
 131          {
 132   1              unsigned int i;
 133   1              for(i=0; i<s; i++);
 134   1              for(i=0; i<s; i++);
 135   1      }
 136          
 137          /******************************************************************************************
 138          /*短延时函数
 139          /******************************************************************************************/
 140          void inerDelay_us(unsigned char n)
 141          {
 142   1              for(;n>0;n--)
 143   1                      _nop_();
 144   1      }
 145          
 146          //**********************************子函数申明*********************************************
 147          // 函数名称： UART_init()串口初始化函数
 148          // 函数功能： 在系统时钟为11.059MHZ时，设定串口波特率为9600bit/s
 149          //            串口接收中断允许，发送中断禁止
 150          //**********************************子函数申明*********************************************
 151          
 152          void UART_init()
 153          {
 154   1                           //初始化串行口和波特率发生器 
 155   1              SCON =0x58;          //选择串口工作方式，打开接收允许
 156   1              TMOD =0x21;          //定时器1工作在方式2，定时器0工作在方式1
 157   1              TH1 =0xfd;           //实现波特率9600（系统时钟11.0592MHZ）
 158   1              TL1 =0xfd;
 159   1              TR1 =1;              //启动定时器T1
 160   1              ET1 =0; 
 161   1              ES=1;                //允许串行口中断
 162   1              PS=1;                //设计串行口中断优先级
 163   1              EA =1;               //单片机中断允许
 164   1      }
 165          
 166          //**********************************子函数申明*********************************************
 167          // 函数名称： com_interrup()串口接收中断处理函数
 168          // 函数功能： 接收包括起始位'S'在内的十位数据到数据缓冲区
 169          //**********************************子函数申明*********************************************
 170          
 171          com_interrupt(void) interrupt 4 using 3
 172          {
 173   1        if(RI)                                //处理接收中断
 174   1                {
 175   2                      TxBuf[flag1]=SBUF; 
 176   2                      RI=0;                                //清除中断标志位
 177   2                      flag1++;
 178   2                      if(flag1==32)                                          
 179   2                        {
C51 COMPILER V9.00   STC89CXX_NRF24L01_TEST                                                03/14/2019 10:45:59 PAGE 4   

 180   3                              flag1=0;
 181   3                              flag2=1;
 182   3                        }
 183   2                }
 184   1      }
 185          
 186          //**********************************子函数申明*********************************************
 187          //函 数:         R_S_Byte(uchar R_Byte)
 188          //功 能:         数据发送        
 189          //**********************************子函数申明*********************************************
 190          
 191          void R_S_Byte(uchar R_Byte)
 192          {       
 193   1               SBUF = R_Byte;  
 194   1           while( TI == 0 );                          //查询法
 195   1               TI = 0;
 196   1      }
 197          
 198          //****************************************************************************************
 199          /*NRF24L01初始化
 200          //***************************************************************************************/
 201          
 202          void init_NRF24L01(void)
 203          {
 204   1          inerDelay_us(100);
 205   1              CE=0;    // StandBy I模式       
 206   1              CSN=1;   // SPI 片选禁止
 207   1              SCK=0;   
 208   1              SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // 写本地地址  
 209   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH); // 写接收端地址
 210   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      //  频道0自动 ACK应答允许     
 211   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  //  允许接收地址只有频道0，如果需要多频道可以参考Page21  
 212   1              SPI_RW_Reg(WRITE_REG + RF_CH, 0);        //   设置信道工作为2.4GHZ，收发必须一致
 213   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH); //设置接收数据长度，本次设置为32字节
 214   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);                 //设置发射速率为1Mbps，发射功率为最大值0dB      
 215   1      
 216   1      }
 217          
 218          /********************************************************************************************
 219          /*函数：uint SPI_RW(uint uchar)
 220          /*功能：NRF24L01的SPI写时序
 221          /********************************************************************************************/
 222          
 223          uint SPI_RW(uint uchar)
 224          {
 225   1              uint bit_ctr;
 226   1              for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
 227   1              {
 228   2                      MOSI = (uchar & 0x80);         // output 'uchar', MSB to MOSI
 229   2                      uchar = (uchar << 1);           // shift next bit into MSB..
 230   2                      SCK = 1;                      // Set SCK high..
 231   2                      uchar |= MISO;                    // capture current MISO bit
 232   2                      SCK = 0;                          // ..then set SCK low again
 233   2              }
 234   1          return(uchar);                        // return read uchar
 235   1      }
 236          
 237          /********************************************************************************************
 238          /*函数：uchar SPI_Read(uchar reg)
 239          /*功能：NRF24L01的SPI时序
 240          /********************************************************************************************/
 241          
C51 COMPILER V9.00   STC89CXX_NRF24L01_TEST                                                03/14/2019 10:45:59 PAGE 5   

 242          uchar SPI_Read(uchar reg)
 243          {
 244   1              uchar reg_val;
 245   1              CSN = 0;                // CSN low, initialize SPI communication...
 246   1              SPI_RW(reg);            // Select register to read from..
 247   1              reg_val = SPI_RW(0);    // ..then read registervalue
 248   1              CSN = 1;                // CSN high, terminate SPI communication
 249   1              return(reg_val);        // return register value
 250   1      }
 251          
 252          /********************************************************************************************/
 253          /*功能：NRF24L01读写寄存器函数
 254          /********************************************************************************************/
 255          
 256          uint SPI_RW_Reg(uchar reg, uchar value)
 257          {
 258   1              uint status;
 259   1              CSN = 0;                   // CSN low, init SPI transaction
 260   1              status = SPI_RW(reg);      // select register
 261   1              SPI_RW(value);             // ..and write value to it..
 262   1              CSN = 1;                   // CSN high again
 263   1              return(status);            // return nRF24L01 status uchar
 264   1      }
 265          
 266          /*********************************************************************************************/
 267          /*函数：uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 268          /*功能: 用于读数据，reg：为寄存器地址，pBuf：为待读出数据地址，uchars：读出数据的个数
 269          /*********************************************************************************************/
 270          
 271          uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 272          {
 273   1              uint status,uchar_ctr;
 274   1              CSN = 0;                                // Set CSN low, init SPI tranaction
 275   1              status = SPI_RW(reg);                   // Select register to write to and read status uchar
 276   1              for(uchar_ctr=0;uchar_ctr<uchars;uchar_ctr++)
 277   1                      pBuf[uchar_ctr] = SPI_RW(0);    // 
 278   1              CSN = 1;                           
 279   1              return(status);                    // return nRF24L01 status uchar
 280   1      }
 281          
 282          /**********************************************************************************************
 283          /*函数：uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 284          /*功能: 用于写数据：为寄存器地址，pBuf：为待写入数据地址，uchars：写入数据的个数
 285          /**********************************************************************************************/
 286          
 287          uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 288          {
 289   1              uint status,uchar_ctr;
 290   1              CSN = 0;                                                                                         //SPI使能       
 291   1              status = SPI_RW(reg);   
 292   1              for(uchar_ctr=0; uchar_ctr<uchars; uchar_ctr++) 
 293   1              SPI_RW(*pBuf++);
 294   1              CSN = 1;                                                                                         //关闭SPI
 295   1              return(status);    
 296   1      }
 297          
 298          /***********************************************************************************************/
 299          /*函数：void SetRX_Mode(void)
 300          /*功能：数据接收配置 
 301          /***********************************************************************************************/
 302          
 303          void SetRX_Mode(void)
C51 COMPILER V9.00   STC89CXX_NRF24L01_TEST                                                03/14/2019 10:45:59 PAGE 6   

 304          {
 305   1              CE=0;
 306   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);                                   // IRQ收发完成中断响应，16位CRC ，主接收
 307   1              CE = 1; 
 308   1              inerDelay_us(130);
 309   1      }
 310          
 311          /************************************************************************************************/
 312          /*函数：unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
 313          /*功能：数据读取后放如rx_buf接收缓冲区中
 314          /************************************************************************************************/
 315          unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
 316          {
 317   1          unsigned char revale=0;
 318   1              sta=SPI_Read(STATUS);                                                                   // 读取状态寄存其来判断数据接收状况
 319   1              if(RX_DR)                                                                                               // 判断是否接收到数据
 320   1              {
 321   2                  CE = 0;                                                                                     //
 322   2                      SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);        // read receive payload from RX_FIFO buffer
 323   2                      revale =1;                                                                                      //读取数据完成标志
 324   2              }
 325   1              SPI_RW_Reg(WRITE_REG+STATUS,sta);                                               //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清楚中断标志
 326   1              return revale;
 327   1      }
 328          
 329          /*************************************************************************************************
 330          /*函数：void nRF24L01_TxPacket(unsigned char * tx_buf)
 331          /*功能：发送 tx_buf中数据
 332          /*************************************************************************************************/
 333          void nRF24L01_TxPacket(unsigned char * tx_buf)
 334          {
 335   1              CE=0;                                                                                                                           //StandBy I模式 
 336   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH);        // 装载接收端地址
 337   1              SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH);                             // 装载数据     
 338   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);                                                           // IRQ收发完成中断响应，16位CRC，主发送
 339   1              CE=1;                                                                                                                           //置高CE，激发数据发送
 340   1              inerDelay_us(10);
 341   1      }
 342          
 343          void mit()
 344          
 345          {  TMOD=0x01;
 346   1         TH0=(65535-50)/256;
 347   1         TL0=(65535-50)%256;
 348   1         EA=1;
 349   1         ET0=1;
 350   1         TR0=1;
 351   1       }
 352          //***********中断函数+脉宽调制***********//
 353          void timer0() interrupt 1
 354          { 
 355   1              if(t<zkb1)
 356   1                               ENA=1;
 357   1                      else 
 358   1                               ENA=0;
 359   1                      if(t<zkb2)
 360   1                                      ENB=1;
 361   1                      else 
 362   1                                      ENB=0;
 363   1                                      t++;
 364   1                      if(t>=100)
 365   1                                      {t=0;}
C51 COMPILER V9.00   STC89CXX_NRF24L01_TEST                                                03/14/2019 10:45:59 PAGE 7   

 366   1                              TH0=(65535-50)/256;
 367   1                       TL0=(65535-50)%256;
 368   1      }
 369          
 370          
 371          tz()
 372          {IN1=1;
 373   1              IN2=1;
 374   1              IN3=1;
 375   1              IN4=1;
 376   1              zkb1=0;
 377   1              zkb2=0;
 378   1      }
 379          ht()
 380          {IN1=0;
 381   1              IN2=1;
 382   1              IN3=0;
 383   1              IN4=1;
 384   1              zkb1=65;
 385   1              zkb2=65;
 386   1      }
 387          
 388          
 389          qianjin()
 390          {IN1=1;
 391   1              IN2=0;
 392   1              IN3=1;
 393   1              IN4=0;
 394   1              zkb1=70;
 395   1              zkb2=70;
 396   1      }
 397          turnleft1()
 398          {IN1=1;
 399   1              IN2=0;
 400   1              IN3=1;
 401   1              IN4=0;
 402   1              zkb1=38;
 403   1              zkb2=65;
 404   1              
 405   1      }
 406          turnright1()
 407          {IN1=1;
 408   1              IN2=0;
 409   1              IN3=1;
 410   1              IN4=0;
 411   1              zkb1=65;
 412   1              zkb2=38;
 413   1              
 414   1      }
 415          
 416          
 417          
 418          //************************************主函数******************************************************
 419          void main(void)
 420          {
 421   1              uchar i =0,tf=0;        
 422   1      
 423   1          init_NRF24L01() ;                           //初始化 NRF24L01/NRF24L01+     
 424   1      
 425   1              CSN = 0;    
 426   1              SPI_RW(FLUSH_RX);
 427   1              SPI_RW(FLUSH_TX);
C51 COMPILER V9.00   STC89CXX_NRF24L01_TEST                                                03/14/2019 10:45:59 PAGE 8   

 428   1              CSN = 1;    
 429   1              Delay(600);     
 430   1               mit();                                 
 431   1              UART_init();                                    //初始化 UART
 432   1      
 433   1      //*************************************************************************************************
 434   1              while(1)
 435   1              {
 436   2      
 437   2                      SetRX_Mode();//接收数据
 438   2      
 439   2                      if(nRF24L01_RxPacket(RxBuf))
 440   2                      {
 441   3      
 442   3                                      LED1=0;                 LED2=0;                 //LED闪烁，表示接收进行中
 443   3      
 444   3                              for (i = 0;i< 1;i++)
 445   3                                      { 
 446   4                                              R_S_Byte(RxBuf[i]);                     //将收到的数据串口输出，可以通过下载线和串口助手观测数据
 447   4                                      }       
 448   3      
 449   3      
 450   3                                 CSN = 0;    
 451   3                                 SPI_RW(FLUSH_RX);
 452   3                                 CSN = 1; 
 453   3                              switch(RxBuf[0])
 454   3      
 455   3                      {
 456   4      
 457   4                                      case 0xfe:
 458   4                                                                              
 459   4                                               qianjin();//收到指令1，小车前进
 460   4                                                                              break;                                           
 461   4      
 462   4                                       case 0xf7:                                         
 463   4                                                                              
 464   4                                                turnright1();//收到指令2，小车右转
 465   4                                                                               break;
 466   4                                       case 0xfd:                                   
 467   4                                                                               
 468   4                                                 ht();//收到指令3，小车后退
 469   4                                                                               break;
 470   4                                       case 0xfb:                                         
 471   4      
 472   4                                                                                      
 473   4                          turnleft1();        //收到指令4，小车左转                    
 474   4                                                                                      break;
 475   4      
 476   4                                       case 0xef:  
 477   4                        tz();                        
 478   4                                                                              
 479   4                                                                              break;//收到指令5，小车停止
 480   4             case 0xdf:  
 481   4                        zkb1=100;//收到指令7，小车加速
 482   4                              zkb2=100;
 483   4                                                                              
 484   4                                                                              break; 
 485   4                                       case 0xbf:  
 486   4                        zkb1=30;//收到指令8，小车减速
 487   4                              zkb2=30;
 488   4                                                                              
 489   4                                                                              break; 
C51 COMPILER V9.00   STC89CXX_NRF24L01_TEST                                                03/14/2019 10:45:59 PAGE 9   

 490   4      
 491   4                               default:   tz();                
 492   4                                                                                      
 493   4      
 494   4                      }
 495   3      
 496   3      
 497   3                      }
 498   2      //***********************检测串口数据，当串口有数据时发送******************************************
 499   2      //        if(flag2==1)                                                                          //当收到串口数据后发送
 500   2      //                      {
 501   2      //
 502   2      //               nRF24L01_TxPacket(TxBuf);                              // 发送数据
 503   2      //                         sta=SPI_Read(STATUS);        
 504   2      //                         SPI_RW_Reg(WRITE_REG+STATUS,sta);
 505   2      // 
 506   2      //                         flag2=0;     
 507   2      //                         LED1=0;               LED2=0;                                  //LED闪烁，表示发送进行中
 508   2      //                         inerDelay_us(1000);
 509   2      //
 510   2      //                      }       
 511   2      //***********************检测串口数据，当串口有数据时发送********************************************
 512   2              
 513   2      //         if(KEY1 ==0 )                                //当KEY1（P2.0)和地短接时
 514   2      //                      {
 515   2      //                              LED1=0; LED2=1; TxBuf[0] = 0x20 ;tf = 1 ; 
 516   2      //                  }
 517   2      
 518   2      //*************************************************************************************************     
 519   2      //         if(KEY2 ==0)                        //当KEY2(P3.7)和地短接时
 520   2      //                 {
 521   2      //                          LED1=1;     LED2=0; TxBuf[0] = 0x37 ;tf = 1 ; 
 522   2      //                 }
 523   2      //*************************************************************************************************
 524   2      //         if (tf==1)
 525   2      //             {        
 526   2      //                              nRF24L01_TxPacket(TxBuf);                           //发送数据
 527   2      //                          sta=SPI_Read(STATUS);       
 528   2      //                          SPI_RW_Reg(WRITE_REG+STATUS,sta);
 529   2      //
 530   2      //                              tf=0; 
 531   2      //                          inerDelay_us(1000);  
 532   2      //
 533   2      //                 }
 534   2      //                              LED1=1; LED2=1; 
 535   2              }
 536   1              
 537   1      }
*** WARNING C290 IN LINE 378 OF STC89CXX-NRF24L01-TEST.C: missing return value
*** WARNING C290 IN LINE 386 OF STC89CXX-NRF24L01-TEST.C: missing return value
*** WARNING C290 IN LINE 396 OF STC89CXX-NRF24L01-TEST.C: missing return value
*** WARNING C290 IN LINE 405 OF STC89CXX-NRF24L01-TEST.C: missing return value
*** WARNING C290 IN LINE 414 OF STC89CXX-NRF24L01-TEST.C: missing return value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    769    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     81      18
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.00   STC89CXX_NRF24L01_TEST                                                03/14/2019 10:45:59 PAGE 10  

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  5 WARNING(S),  0 ERROR(S)
